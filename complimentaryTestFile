import cv2
import numpy as np
from sklearn.cluster import KMeans
from PIL import ImageColor
import requests
import torch
import clip
import os
import openai
from torchvision.transforms import Compose, Resize, CenterCrop, ToTensor  # Add this line
from PIL import Image
import streamlit as st

# Load the model
device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load('ViT-B/32', device=device)

openai.api_key = os.environ["OPENAI_API_KEY"]

# Define the preprocessing steps
preprocess = Compose([
    Resize(256, interpolation=Image.BICUBIC),
    CenterCrop(224),
    ToTensor()
])

# Streamlit code
st.title('Clothing Classifier and Complementary Suggester')

uploaded_file = st.file_uploader("Choose an image...", type="jpg")

def get_dominant_colors(image, num_colors):
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    reshaped_image = image.reshape(-1, 3)
    kmeans = KMeans(n_clusters=num_colors)
    labels = kmeans.fit_predict(reshaped_image)
    colors = kmeans.cluster_centers_
    return colors.astype(int)

def get_complementary_color(color):
    r, g, b = color
    comp_color = [255 - r, 255 - g, 255 - b]
    return comp_color

def get_clothing_items(comp_color):
    # Convert the RGB color to a hex color
    hex_color = '#%02x%02x%02x' % (comp_color[0], comp_color[1], comp_color[2])

    # Define the API endpoint
    url = "https://api.unsplash.com/search/photos"

    # Define the query parameters
    params = {
        "query": "clothing",
        "color": hex_color,
        "per_page": 5,  # Limit the number of results
        "client_id": "Y3GlxcQEeAeQoJ3xh2kPCKkIJ27DKybkZ0ZHe-ofuI4"  # Replace with your Unsplash Access Key
    }

    # Send the request
    response = requests.get(url, params=params)

    # Check the response
    if response.status_code == 200:
        # Parse the JSON response
        data = response.json()

        # Extract the photo information
        photos = data["results"]
        photo_links = [photo["urls"]["full"] for photo in photos]

        return photo_links

    else:
        print("Error:", response.status_code)
        return []
